from django.db import models
from djongo import models as djongo_models
from django.utils import timezone

class Equipment(djongo_models.Model):
    """Modèle principal pour les équipements"""
    _id = djongo_models.ObjectIdField(primary_key=True)
    model = models.CharField(max_length=200, blank=True, null=True)
    serial = models.CharField(max_length=100, blank=True, null=True, unique=True)
    barcode = models.CharField(max_length=100, blank=True, null=True)
    price = models.DecimalField(max_digits=15, decimal_places=2, blank=True, null=True)
    currency = models.CharField(max_length=3, default='MAD', blank=True, null=True)
    status = models.CharField(max_length=50, blank=True, null=True)  # En stock, En service, HS, etc.
    description = models.TextField(blank=True, null=True)
    config_user = models.CharField(max_length=100, blank=True, null=True)
    creation_date = models.DateTimeField(blank=True, null=True)
    dms = models.DateTimeField(blank=True, null=True)  # Date de mise en service
    photo = models.URLField(blank=True, null=True)
    power = models.CharField(max_length=100, blank=True, null=True)
    files = models.JSONField(blank=True, null=True)
    location = models.CharField(max_length=200, blank=True, null=True)
    
    # Métadonnées
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.model} - {self.serial or 'N/A'}"

    class Meta:
        ordering = ['-created_at']
        verbose_name = 'Équipement'
        verbose_name_plural = 'Équipements'


class EquipmentDesignation(djongo_models.Model):
    """Désignation des équipements"""
    _id = djongo_models.ObjectIdField(primary_key=True)
    equipment = models.ForeignKey(Equipment, on_delete=models.CASCADE, related_name='designations')
    equipment_designation_id = models.IntegerField()
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Désignation {self.equipment_designation_id} pour {self.equipment}"


class EquipmentFamily(djongo_models.Model):
    """Famille d'équipements"""
    _id = djongo_models.ObjectIdField(primary_key=True)
    equipment = models.ForeignKey(Equipment, on_delete=models.CASCADE, related_name='families')
    family_id = models.IntegerField()
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Famille {self.family_id} pour {self.equipment}"


class EquipmentLocation(djongo_models.Model):
    """Localisation des équipements"""
    _id = djongo_models.ObjectIdField(primary_key=True)
    equipment = models.ForeignKey(Equipment, on_delete=models.CASCADE, related_name='locations')
    site_id = models.IntegerField()
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Localisation {self.site_id} pour {self.equipment}"


class EquipmentSubfamily(djongo_models.Model):
    """Sous-famille d'équipements"""
    _id = djongo_models.ObjectIdField(primary_key=True)
    equipment = models.ForeignKey(Equipment, on_delete=models.CASCADE, related_name='subfamilies')
    subfamily_id = models.IntegerField()
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Sous-famille {self.subfamily_id} pour {self.equipment}"
